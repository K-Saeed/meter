name: Angular CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build -- --configuration=production 
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          REPO_LOWER=$(echo "${{ github.repository }}" | tr "[:upper:]" "[:lower:]")
          cd /home/ubuntu/meter-backend
          docker pull ghcr.io/$REPO_LOWER:${{ github.ref_name }}
          docker compose down meter-frontend || { echo "Docker Compose down failed"; exit 1; }
          docker compose up meter-frontend -d || { echo "Docker Compose up failed"; exit 1; }
          sleep 10
          if ! docker compose ps | grep -q "Up"; then
            echo "Containers failed to start properly"
            docker compose logs
            exit 1
          fi
          echo "Deployment successful"
        '