name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Build with Gradle
      run: |
        chmod +x gradlew  
        ./gradlew clean build -x test --no-daemon
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: app
        path: build/libs/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: app
        path: build/libs
        
    - name: Rename JAR file
      run: mv /home/runner/work/meter-backend/meter-backend/build/libs/meter-backend-0.0.1-SNAPSHOT.jar ./app.jar

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          # Convert repository name to lowercase for Docker
          REPO_LOWER=$(echo "${{ github.repository }}" | tr "[:upper:]" "[:lower:]") 
          cd /home/ubuntu/meter-backend
          # Create or update .env file
              cat << EOF > .env
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        GITHUB_REPOSITORY=$REPO_LOWER
        IMAGE_TAG=${{ github.ref_name }}
        EOF

          # Pull, stop, and restart the container
          docker pull ghcr.io/$REPO_LOWER:${{ github.ref_name }}
          # Stop existing containers
          docker compose down || { echo "Docker Compose down failed"; exit 1; }
          
          # Start new containers
          docker compose up -d || { echo "Docker Compose up failed"; exit 1; }
          
          # Check if the containers are running
          sleep 10  # Give some time for containers to start
          if ! docker compose ps | grep -q "Up"; then
            echo "Containers failed to start properly"
            docker compose logs
            exit 1
          fi
          
          echo "Deployment successful"
        '