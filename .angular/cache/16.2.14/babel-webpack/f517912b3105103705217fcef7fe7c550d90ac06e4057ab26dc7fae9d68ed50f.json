{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let UserProviderModalComponent = class UserProviderModalComponent {\n  constructor() {\n    this.dropdownOpen = 'none';\n    this.selectedRole = [];\n    this.phoneNumber = '+966';\n    this.showPassword = false;\n    this.showConfirmPassword = false;\n    this.Role = [{\n      name: 'Customer',\n      selected: false\n    }, {\n      name: 'Provider',\n      selected: false\n    }, {\n      name: 'Merchant',\n      selected: false\n    }];\n    this.Providers = [{\n      name: 'Company',\n      selected: false\n    }, {\n      name: 'Establishment',\n      selected: false\n    }, {\n      name: 'Office',\n      selected: false\n    }];\n    this.filteredProviders = [...this.Providers]; // Copy initial providers\n    this.selectedVisibility = '';\n    this.roleProviderMap = {\n      'Customer': ['Company', 'Establishment'],\n      'Provider': ['Establishment', 'Office'],\n      'Merchant': ['Company', 'Office']\n    };\n  }\n  toggleDropdown(type) {\n    if (this.dropdownOpen === type) {\n      this.dropdownOpen = 'none'; // Close if the same dropdown is clicked\n    } else {\n      this.dropdownOpen = type; // Open the clicked dropdown and close others\n    }\n  }\n\n  updateSelectedRole() {\n    this.selectedRole = [this.selectedVisibility];\n    this.updateFilteredProviders();\n    this.dropdownOpen = 'none'; // Close dropdown after selection\n  }\n\n  updateFilteredProviders() {\n    const roleProviders = this.roleProviderMap[this.selectedVisibility];\n    if (roleProviders) {\n      this.filteredProviders = this.Providers.filter(provider => roleProviders.includes(provider.name));\n    } else {\n      this.filteredProviders = [...this.Providers];\n    }\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  toggleConfirmPasswordVisibility() {\n    this.showConfirmPassword = !this.showConfirmPassword;\n  }\n  onPhoneInput(event) {\n    const input = event.target;\n    if (!input.value.startsWith('+966')) {\n      input.value = '+966';\n    }\n    if (input.value.length > 13) {\n      input.value = input.value.slice(0, 13);\n    }\n    this.phoneNumber = input.value;\n  }\n};\nUserProviderModalComponent = __decorate([Component({\n  selector: 'app-user-provider-modal',\n  templateUrl: './user-provider-modal.component.html',\n  styleUrls: ['./user-provider-modal.component.css']\n})], UserProviderModalComponent);","map":{"version":3,"names":["Component","UserProviderModalComponent","constructor","dropdownOpen","selectedRole","phoneNumber","showPassword","showConfirmPassword","Role","name","selected","Providers","filteredProviders","selectedVisibility","roleProviderMap","toggleDropdown","type","updateSelectedRole","updateFilteredProviders","roleProviders","filter","provider","includes","togglePasswordVisibility","toggleConfirmPasswordVisibility","onPhoneInput","event","input","target","value","startsWith","length","slice","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Memo\\meter\\src\\app\\core\\components\\users\\user-add-modal\\user-provider\\user-provider-modal\\user-provider-modal.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-user-provider-modal',\n  templateUrl: './user-provider-modal.component.html',\n  styleUrls: ['./user-provider-modal.component.css']\n})\nexport class UserProviderModalComponent {\n  dropdownOpen: 'none' | 'provider' | 'role' = 'none';\n  selectedRole: string[] = [];\n  phoneNumber: string = '+966';\n  showPassword = false;\n  showConfirmPassword = false;\n\n  Role = [\n    { name: 'Customer', selected: false },\n    { name: 'Provider', selected: false },\n    { name: 'Merchant', selected: false },\n  ];\n\n  Providers = [\n    { name: 'Company', selected: false },\n    { name: 'Establishment', selected: false },\n    { name: 'Office', selected: false },\n  ];\n\n  filteredProviders = [...this.Providers]; // Copy initial providers\n\n  selectedVisibility: string = '';\n\n  roleProviderMap: { [key: string]: string[] } = {\n    'Customer': ['Company', 'Establishment'],\n    'Provider': ['Establishment', 'Office'],\n    'Merchant': ['Company', 'Office'],\n  };\n\n  toggleDropdown(type: 'provider' | 'role') {\n    if (this.dropdownOpen === type) {\n      this.dropdownOpen = 'none'; // Close if the same dropdown is clicked\n    } else {\n      this.dropdownOpen = type; // Open the clicked dropdown and close others\n    }\n  }\n\n  updateSelectedRole() {\n    this.selectedRole = [this.selectedVisibility];\n    this.updateFilteredProviders();\n    this.dropdownOpen = 'none'; // Close dropdown after selection\n  }\n\n  updateFilteredProviders() {\n    const roleProviders = this.roleProviderMap[this.selectedVisibility];\n    if (roleProviders) {\n      this.filteredProviders = this.Providers.filter(provider => \n        roleProviders.includes(provider.name)\n      );\n    } else {\n      this.filteredProviders = [...this.Providers];\n    }\n  }\n\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  toggleConfirmPasswordVisibility() {\n    this.showConfirmPassword = !this.showConfirmPassword;\n  }\n\n  onPhoneInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    if (!input.value.startsWith('+966')) {\n      input.value = '+966';\n    }\n    if (input.value.length > 13) {\n      input.value = input.value.slice(0, 13);\n    }\n    this.phoneNumber = input.value;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}